package runner.contactlab.com;

import java.beans.PropertyVetoException;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

import javax.sql.DataSource;

import script.contactlab.com.ApplicationParameter;
import script.contactlab.com.LoadDataFileNameRepository;
import script.contactlab.com.PartialResultWriter;
import script.contactlab.com.PropertyLoadDataFileNameRepository;
import script.contactlab.com.SearchLoadDataStatement;
import script.contactlab.com.TimerConnectionAggregator;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.inject.Inject;

public class BruteForceApplicationRunner extends ApplicationRunner {	
	private static final Long Z = Long.valueOf(0l);
	
	private LoadDataFileNameRepository repository;

	@Inject
	public BruteForceApplicationRunner(final LoadDataFileNameRepository repository) {
		this.repository = repository;
	}

	@Override
	protected void realRun(final ApplicationParameter params) throws Exception {
		logger.info("Starting ...");		
		final String filesPath = params.getPathOfPayload() + SUB_PATH_FILES;
				
		logger.info("Start search LOAD DATA into general query log file");
		final List<Integer> idsWithLoadData = new SearchLoadDataStatement().run(params.generalQueryLogPath());
		
		logger.info("Start load file name of Connections");
		final List<Integer> connectionFileNames = retriveConnectionFiles(new File(filesPath));
		
		if (idsWithLoadData.isEmpty()) {
			logger.info("Start schedule of " + connectionFileNames.size() + " connection's");
			
			final List<TimerConnectionAggregator>  tcas = Lists.newArrayList();			
			for (Integer fileName : connectionFileNames) {
				tcas.add(new TimerConnectionAggregator(Z, Sets.newHashSet(fileName)));
			}
			
			schedule(params.getNumberOfThread(), tcas, filesPath, null, params.getDatabaseServer(), params.getPathOfPayload());											
		} else {
			logger.info("Start searching of real file name of LOAD DATA: " + idsWithLoadData.size());
			((PropertyLoadDataFileNameRepository)repository).run(idsWithLoadData, params.getPathOfRealFileNames());
			
			final List<TimerConnectionAggregator>  tcas = Lists.newArrayList();			
			for (Integer i : connectionFileNames) {
				final TimerConnectionAggregator tca = new TimerConnectionAggregator(Z, Sets.newHashSet(i));
				
				if (repository.containsKey(i)) {
					tca.addLoadData(i, repository.get(i));
				}
				
				tcas.add(tca);
			}
			
			logger.info("Start schedule of " + connectionFileNames.size() + " connection's and " + idsWithLoadData.size() + " load data");
			schedule(params.getNumberOfThread(), tcas, filesPath, params.loadDataDirPath(), params.getDatabaseServer(), params.getPathOfPayload()); 	
		}
	}
	
	private void schedule(int numberOfThread, List<TimerConnectionAggregator> data, String filesPath, String loadDatasPath, String dbHostName, String generalLogDirPath) {
		final Queue<Future<PayloadAsync>> futureData = new LinkedList<Future<PayloadAsync>>(); 
		
		addHookForCancelTask(futureData);
		
		final ExecutorService pool = Executors.newFixedThreadPool(numberOfThread);
		
		try {
			final DataSource ds = buildDataSource(dbHostName, numberOfThread);			
			
			for (TimerConnectionAggregator tca : data) {
				futureData.add(
					pool.submit(
						new MyCallable(tca, filesPath, loadDatasPath, ds) 
					)
				);
			}			
		} catch (PropertyVetoException e) {
			logger.error(null, e);
		}
		
		logger.info("thread pool shutdown");
		pool.shutdown();		
		
//		try {
//			logger.info("1: thread pool awaitTermination");
//			pool.awaitTermination(Long.MAX_VALUE, TimeUnit.MINUTES);
//		} catch (InterruptedException e) {
//			logger.error(null, e);
//		}					

		//XXX thread pool for write partial report 						
		final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
		
		long d = 60 * 30; //XXX 30 Min 		
		final PartialResultWriter prw = new PartialResultWriter(futureData, generalLogDirPath);		
		final ScheduledFuture<?> sf = scheduler.scheduleAtFixedRate(prw, d, d, TimeUnit.SECONDS);
		
		scheduler.schedule(new Runnable() {
			public void run() {
				if (prw.isEnd()) {
					sf.cancel(false);
					
					scheduler.shutdown();
				}
			}
		}, 5, TimeUnit.MINUTES);
				
//		try {
//			logger.info("2: thread pool awaitTermination");
//			scheduler.awaitTermination(Long.MAX_VALUE, TimeUnit.MINUTES);
//		} catch (InterruptedException e) {
//			logger.error(null, e);
//		}	
		
		try {
			logger.info("thread pool awaitTermination");
			pool.awaitTermination(Long.MAX_VALUE, TimeUnit.MINUTES);
		} catch (InterruptedException e) {
			logger.error(null, e);
		}							
	}
	
	private List<Integer> retriveConnectionFiles(final File folder) {
		final List<Integer> result = new ArrayList<Integer>();
		
	    for (final File fileEntry : folder.listFiles()) {
	        if (!fileEntry.isDirectory()) {
	        	try {
		        	final Integer i = Integer.valueOf(fileEntry.getName());
		        	
		        	result.add(i);	        		
	        	} catch (NumberFormatException nfe) {	        			        		
	        	}
	        }
	    }
	    
	    Collections.sort(result);
	    
	    return result;
	}
	
}
