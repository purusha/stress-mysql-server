package script.contactlab.com;

import static org.hamcrest.CoreMatchers.containsString;
import static org.junit.Assert.assertThat;

import java.io.IOException;
import java.net.URL;
import java.util.Enumeration;

import org.apache.commons.lang3.StringUtils;
import org.junit.Test;

public class ConnectionScannerTest {

	String result = 
		"USE C3000119"
		+ "/* mysql-connector-java-5.1.21 ( Revision: ${bzr.revision-id} ) */SHOW VARIABLES WHERE Variable_name ='language' OR Variable_name = 'net_write_timeout' OR Variable_name = 'interactive_timeout' OR Variable_name = 'wait_timeout' OR Variable_name = 'character_set_client' OR Variable_name = 'character_set_connection' OR Variable_name = 'character_set' OR Variable_name = 'character_set_server' OR Variable_name = 'tx_isolation' OR Variable_name = 'transaction_isolation' OR Variable_name = 'character_set_results' OR Variable_name = 'timezone' OR Variable_name = 'time_zone' OR Variable_name = 'system_time_zone' OR Variable_name = 'lower_case_table_names' OR Variable_name = 'max_allowed_packet' OR Variable_name = 'net_buffer_length' OR Variable_name = 'sql_mode' OR Variable_name = 'query_cache_type' OR Variable_name = 'query_cache_size' OR Variable_name = 'init_connect'"
		+ "/* mysql-connector-java-5.1.21 ( Revision: ${bzr.revision-id} ) */SELECT @@session.auto_increment_increment"
		+ "SHOW COLLATION"
		+ "SET NAMES latin1"
		+ "SET character_set_results = NULL"
		+ "SET autocommit=1"
		+ "SET sql_mode='STRICT_TRANS_TABLES'"
		+ "SELECT last_row FROM counters WHERE `name` = 'micro_monitoring_domains_last_update'"
		+ "SELECT micro_monitor_domain_id, domain from micro_monitoring_domains where monitor_domain = 1"
		+ "SELECT micro_monitor_domain_id, domain from micro_monitoring_domains where monitor_domain = 1"
		+ "SELECT micro_monitor_domain_id, domain from micro_monitoring_domains where monitor_domain = 1"
		+ "SELECT micro_monitor_domain_id, domain from micro_monitoring_domains where monitor_domain = 1"
		+ "DELETE FROM MLR_TA_DELIVERY_CACHE WHERE sent = 0 OR sent IS NULL"
		+ "INSERT IGNORE INTO MLR_TA_DELIVERY_CACHE (delivery_id, qualifier_id, newsletter_id, status, delivery_date, delivery_end_date, sent, role, parent_id, row_date) SELECT    d.DELIVERY_ID,    t.QUALIFIER_ID,    d.NEWSLETTER_ID,    d.STATUS,    d.START_DATE,    d.END_DATE,    d.RECIPIENTS,    d.ROLE,    d.PARENT_ID,    NOW()  FROM `MLR_TA_DELIVERY` as d  INNER JOIN MLR_TA_TEMPLATE as t ON d.TEMPLATE_ID = t.TEMPLATE_ID  WHERE d.STATUS IN (3, -3, 8, 12, 13, 2)  AND d.IS_TEST = 0 AND t.MEDIUM = 0  AND d.RECIPIENTS > 0 AND NOT EXISTS (select delivery_id from MLR_TA_DELIVERY_CACHE WHERE delivery_id = d.DELIVERY_ID)"
		+ "INSERT IGNORE INTO MLR_TA_DELIVERY_CACHE (delivery_id, qualifier_id, newsletter_id, status, delivery_date, delivery_end_date, sent, role, parent_id, row_date) SELECT  d.DELIVERY_ID,  t.QUALIFIER_ID,   d.NEWSLETTER_ID, d.STATUS, d.START_DATE,  d.END_DATE, d.RECIPIENTS, d.ROLE,  d.PARENT_ID,  NOW() FROM `MLR_TA_DELIVERY` as d INNER JOIN MLR_TA_TEMPLATE as t ON d.TEMPLATE_ID = t.TEMPLATE_ID WHERE d.STATUS IN (3, -3, 8, 12, 13, 2) AND t.MEDIUM IN (1, 2, 3) AND d.RECIPIENTS > 0 AND NOT EXISTS (select delivery_id from MLR_TA_DELIVERY_CACHE WHERE delivery_id = d.DELIVERY_ID)"
		+ "SELECT DELIVERY_ID FROM  MLR_TA_DELIVERY WHERE  IS_TEST = 0 AND  ARCHIVED = 0 AND  (START_DATE > DATE_SUB(NOW() , INTERVAL 1 MONTH) OR END_DATE >= DATE_SUB(NOW() , INTERVAL 1 MONTH)) AND  EXISTS( SELECT delivery_id from MLR_TA_DELIVERY_CACHE WHERE delivery_id  = MLR_TA_DELIVERY.DELIVERY_ID AND (update_date < DATE_SUB(NOW(), INTERVAL 1 WEEK)))"
		+ "SELECT delivery_id FROM MLR_TA_DELIVERY_CACHE WHERE ( update_date <= DATE_SUB(NOW(), INTERVAL 120 MINUTE) OR update_date IS NULL OR delivery_date >= DATE_SUB(NOW(), INTERVAL 2 HOUR )) AND ( delivery_date >= DATE_SUB(NOW(), INTERVAL 8 DAY) AND is_triggered = 0) AND STATUS IN(3, -3) AND archived = 0 and sent > 0  ORDER BY update_date ASC";
	
	@Test
	public void test5143() throws IOException {
		final ClassLoader loader = Thread.currentThread().getContextClassLoader();
		final Enumeration<URL> resources = loader.getResources("5143");		
		final String path = resources.nextElement().toString();
		final String replace = StringUtils.replace(path, "target/test-classes", "src/test/resources"); 
		final String realPath = StringUtils.substringAfter(replace, "file:");
		
		for (String sts : new ConnectionScanner(realPath).buildStatemens()) {
			assertThat(sts, result, containsString(sts));
		}
	}
	
}
