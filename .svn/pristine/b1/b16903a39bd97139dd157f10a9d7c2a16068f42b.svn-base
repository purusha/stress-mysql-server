package script.contactlab.com;

import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.Future;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import runner.contactlab.com.PayloadAsync;

public class PartialResultWriter implements Runnable {	
	private static final int NUMBER_OF_ITEMS = 5000;
	private static final Logger logger = LoggerFactory.getLogger(PartialResultWriter.class);

	private Queue<? extends Future<PayloadAsync>> futureData;
	private String pathWhereToWriteFile;
	private boolean end;

	public PartialResultWriter(Queue<? extends Future<PayloadAsync>> futureData, String pathWhereToWriteFile) {
		this.futureData = futureData;
		this.pathWhereToWriteFile = pathWhereToWriteFile;
		this.end = false;
	}
	
	@Override
	public void run() {
		logger.info("START: search and write partial result");		
		
		if (futureData.isEmpty()) {
			end = true;
		} else {
			writeResult();
		}
				
		logger.info("STOP: search and write partial result");
	}
	
	private void writeResult() {
		final List<PayloadAsync> partialResult = new ArrayList<PayloadAsync>();
				
		//XXX DRY
		Future<PayloadAsync> element = futureData.element();
		boolean continueLoop = element.isDone() && !element.isCancelled() && partialResult.size() < NUMBER_OF_ITEMS; 
		
		while(continueLoop) {
			try {
				partialResult.add(futureData.remove().get());					
			} catch (Exception e) {
				logger.error(e.getMessage());
			}						

			if (futureData.isEmpty()) {
				continueLoop = false;
			} else {
				//XXX DRY
				element = futureData.element();	
				continueLoop = element.isDone() && !element.isCancelled() && partialResult.size() < NUMBER_OF_ITEMS;
			}
		}		
		
		if (!partialResult.isEmpty()) {
			try {
				new PrintResult().print(partialResult, pathWhereToWriteFile);
			} catch (Exception e) {
				logger.error(e.getMessage());
			}			
		}
	}

	public boolean isEnd() {
		return end;
	}

}
