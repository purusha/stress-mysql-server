package runner.contactlab.com;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import script.contactlab.com.ApplicationCheckPointCounter;
import script.contactlab.com.ApplicationParameter;
import script.contactlab.com.ApplicationParameterHandler;
import script.contactlab.com.LoadDataFileNameRepository;
import script.contactlab.com.PropertyLoadDataFileNameRepository;

import com.google.inject.AbstractModule;
import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.Singleton;
import com.mchange.v2.log.FallbackMLog;

public class App {
	private static final Logger logger = LoggerFactory.getLogger(App.class);
	
    public static void main( String[] args ) {
        
    	final Injector injector = Guice.createInjector(
			new AbstractModule() {
				
				@Override
				protected void configure() {					
					
//					bind(ApplicationRunner.class).to(DelayedApplicationRunner.class);		
//					bind(LoadDataFileNameRepository.class).to(GrepLoadDataFileNameRepository.class).in(Singleton.class);
					
					bind(ApplicationRunner.class).to(BruteForceApplicationRunner.class);
					bind(LoadDataFileNameRepository.class).to(PropertyLoadDataFileNameRepository.class).in(Singleton.class);
					
					bind(ApplicationCheckPointCounter.class).in(Singleton.class);
				}
			}
    	);
    	
    	//XXX 
    	// c3p0 non ha un log binded with slf4j ... !!?
    	// visto che di default usa l'impementazione jdk che stampa su sysout
    	// gli alzo il log level a WARNING
    	System.setProperty("com.mchange.v2.log.MLog", FallbackMLog.class.getCanonicalName());
    	System.setProperty("com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL", "WARNING");

    	try {
        	if (args.length == 0) {
        		
        		injector.getInstance(ApplicationRunner.class).run();
        		
        	} else if (args.length == 3) {
        		
        		final ApplicationParameter params = new ApplicationParameter(new Integer(args[0]), args[1], args[2]);        		
        		new ApplicationParameterHandler().check(params.getPathOfPayload());        		
        		injector.getInstance(ApplicationRunner.class).run(params);
        		
        	} else {
        		
        		System.out.println("Execute with: numberOfThread databaseServer absolutePathOfPayload");
        		System.out.println(">java -jar mysql-stress-tool.jar 10 db1m-staging.contactlab.test /home/alan/Desktop/4");
        		
        	}    	    	        		
    	} catch (Exception e) {    		
    		logger.error(null, e);
    	}    	
    }
       
}

/*

	Export with:
	
	> mvn compile assembly:single
	
	http://stackoverflow.com/questions/574594/how-can-i-create-an-executable-jar-with-dependencies-using-maven

*/
